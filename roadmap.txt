ROADMAP :

----------------------------------------------------------------------

V.0.1 :

  Développement du parser et de différentes stratégies permettant un traitement plus approfondi et spécifique pour certaines URLS connues.

  Description très basique :

    1. Le parser récupère une URL en entrée
    2. Le parser d'URL s'occupe de récupérer la page HTML correspondant à l'URL
    3. Les headers checkés en priorité sont :
      a. Les balise meta OpenGraph (og:xxx)
      b. <title>, <meta description>
      c. Les images contenues dans la page
    4. Le parser renvoie soit une réponse vide si rien n'est trouvé, ou erreur 404 (autres cas à étudier) et sinon un hash de type :
      {
        title: "Super video",
        description: "Excellent one, gotta love it",
        type: "video",
        images: [
          "http://example.com/image1.jpg",
          "http://example.com/image2.jpg",
          "http://example.com/image3.jpg"
        ]
      }

----------------------------------------------------------------------

V.0.2 :

  Il faut transformer le composant en service HTTP très simple, recevant des requêtes POST ayant pour unique paramètre le champ contenant le texte de l'utilisateur à parser.

  1. Le service reçoit une réponse POST contenant un champ "content" contenant le texte à parser
  2. Il appelle ContentPreview#parse avec le champ "content" comme argument afin de déléguer la tâche au parser
  3. Selon la réponse successful ou non du parser, un code HTTP différent est renvoyé ainsi que le résultat du parsing ou non :
    a. Le parser renvoie une réponse vide (nil, s'évaluant à false), indiquant que rien n'a été trouvé, le service renvoie un code 404
    b. Le parser renvoie un hash (s'évaluant à true), celui-ci est converti en JSON et renvoyé avec un code 200


----------------------------------------------------------------------

V.0.3 :

  Développer un client JS (dépendant de jQuery) permettant de parser un contenu texte et/ou HTML, d'interroger le serveur sur d'éventuels contenus media et d'appeler un callback défini par l'utisateur si un contenu media est renvoyé.
  Il s'accompagnera d'un plugin jQuery permettant l'utilisation de $.fn.data() afin de persister l'état de la preview et ne la rafraîchir qu'en cas de besoin.

  Quelques spécifications :

    1. La méthode #parse est appelée sur le client et prend en argument :
      a. une chaîne de caractères pouvant contenir du HTML
      b. une fonction callback recevant comme unique argument un objet JS de type :
        {
          title: "xx",
          description: "xxxxx",
          image: "http://example.com/pic.jpg"
        }
    2. La méthode parse du client s'occupe de récupérer la première URL contenue dans le chaîne de caractère passée en argument
    3. S'il s'agit d'une nouvelle URL, il envoie une requête $.post contenant l'URL extraite au service
    4. Le retour de la requête est traitée :
      a. Si le serveur retourne un code HTTP 200, le contenu de la réponse JSON est parsé et le callback appelé
      b. Si le serveur retourne un code HTTP 404,


  Example d'utilisation du plugin:

    // On indique au parser l'URL du service
    ContentPreview.service_url = 'http://example.com/content-preview-service'
    var $textarea = $('textarea#user-content-input')

    $textarea.on('keyup', function() {
      $textarea.parseContentPreview($textarea.val(), function(resp) {
        // Traitement de la réponse
      });
    });

----------------------------------------------------------------------

V.1 :

  Une fois le service et le client JS testés complètement

----------------------------------------------------------------------

Idées supplémentaires :

  - Mise en place d'un cache (probablement avec Redis) permettant de stocker le hash de réponse et de ne pas rechecker une URL si celle-ci a déjà été stockée. (Peut être avec un EXPIRE en fonction du cache ... à voir)


